#Symmetric laminates only
import numpy as np
import matplotlib.pyplot as plt
from math import cos
from math import sin
from math import pi

np.set_printoptions(precision=3)

#Stiffness matrix Q
Q0=[[155.7*1e7,3.02*1e7,0*1e7],[3.02*1e7,12.16*1e7,0*1e7],[0*1e7,0*1e7,4.40*1e7]]
print (np.array(Q0))

#Laminate parameters
stack=[0,pi/2,pi/2,0] #Stacking sequence from top down
thickness=[0.15*1e-3,0.15*1e-3,0.15*1e-3,0.15*1e-3] #Thickness of each ply from top down
#Unit test len(stack)=len(thickness)?

#Input forces N and moments M per unit length (N/m, N)
forces=np.array([5000,0,0]) #Nx, Ny, Nxy
moments=np.array([0,0,0]) #Mx, My, Mxy
forces.shape=[3,1]
moments.shape=[3,1]

#Configure stacking sequence and create array of ply heights about the midplane
midplane=np.sum(thickness[:])/2 #Geometric midplane
mid=int(len(thickness)/2) #Array element right before the geometric midplane
        
if (len(thickness)%2==1): #Odd number of plies
    height=np.zeros(len(thickness)+2)
    stack.insert(mid+int(1),stack[mid]) #Duplicate the middle ply angle
    thickness[mid]=thickness[mid]/2 #Halve the thickness of the middle ply
    thickness.insert(mid+1,thickness[mid]) #Duplicate the middle ply thickness
    print("Odd \n",height,", ",stack,"\n")
else: #Even number of plies
    height=np.zeros(len(thickness)+1)
    print("Even \n",height,", ",stack,"\n")

for i in range(len(height)):
    height[i]=np.sum(thickness[0:i])-midplane
    print("(midplane, height array) ",midplane,", ",height,'\n')

#Transformation matrix T1 inverse (primary strain --> principal strain)
#Transformation T2 (principal stress --> primary stress)

#Function returns transformed stiffness matrix Qbar
def transform_Q(Q0,ply_angle):
    m=cos(ply_angle)
    n=sin(ply_angle)
    T1=[[m**2,n**2,2*m*n],[n**2,m**2,-2*m*n],[-m*n,m*n,m**2-n**2]]
    T2=[[m**2,n**2,m*n],[n**2,m**2,-m*n],[-2*m*n,2*m*n,m**2-n**2]]
    T1_inv=np.linalg.inv(T1)
    Qbar=np.linalg.multi_dot([T1_inv,Q0,T2])
   
    return Qbar

#Function returns the stress in primary material directions
def transform_stress(principalStress,ply_angle):
    m=cos(ply_angle)
    n=sin(ply_angle)
    T1=[[m**2,n**2,2*m*n],[n**2,m**2,-2*m*n],[-m*n,m*n,m**2-n**2]]
    primaryStress=np.dot(T1,principalStress)
    
    return primaryStress

#Function returns the strain in primary material directions
def transform_strain(principalStrain,ply_angle):
    m=cos(ply_angle)
    n=sin(ply_angle)
    T2=[[m**2,n**2,m*n],[n**2,m**2,-m*n],[-2*m*n,2*m*n,m**2-n**2]]
    primaryStrain=np.dot(T2,principalStrain)
    
    return principalStrain

#Calculate A, B, D matrices by integrating transformed stiffness matrix over all plies based on laminate 
#constitutive equations
#Units for A, B, D matrices respectively are hN/m, hN, hNm

A=np.zeros([3,3])
B=np.zeros([3,3])
B_inv=B
D=np.zeros([3,3])

for i in range(len(Q0)):
    for j in range(len(Q0[0])):
        for k in range(len(stack)):
            Qbar=transform_Q(Q0,stack[k])
            ply_kA=height[k+1]-height[k]
            ply_kB=(height[k+1]**2-height[k]**2)/2
            ply_kD=(height[k+1]**3-height[k]**3)/3
            A[i,j]+=ply_kA*Qbar[i,j]
            B[i,j]+=ply_kB*Qbar[i,j]
            D[i,j]+=ply_kD*Qbar[i,j]

print("\n","A \n",A,"\n B \n",B,"\n D \n",D,"\n")            
A_inv=np.linalg.inv(A)

#Set ABD matrix, and force column vectors
#I think I made a mistake here. The extension-twisting coupling matrix should be B transpose
ABD=np.concatenate((np.concatenate((A,B),axis=0),np.concatenate((B,D),axis=0)),axis=1)
print ("\n ABD stiffness matrix in hectanewton/meter, hectanewton, and hectanewton meter respectively: \n",ABD,"\n")
force_moment=np.concatenate((forces,moments))

#Calculate principal laminate strains and radii of curvature at midplane
midstrain=np.dot(np.linalg.inv(ABD),force_moment)
print ("\n Strains (ex, ey, exy) and radii of curvature (kx, ky, kxy): \n",midstrain)

#Assign variables for principal strains and stresses in each ply k
#Calculate principal and primary strains and stresses in each ply k
#Strain varies linearly
estrain_prin=midstrain[:3]
kstrain_prin=midstrain[3:6]
plystrain_prin=np.zeros(shape=(3,2*len(height)-2))
plystress_prin=np.zeros(shape=(3,2*len(height)-2))
plystrain_prim=np.zeros(shape=(3,2*len(height)-2))
plystress_prim=np.zeros(shape=(3,2*len(height)-2))
#estrain.shape=[3,1]
#kstrain.shape=[3,1]

#Are these loops really necessary?
for i in range(3):
    plystrain_prin[i,0]
    plystress_prin[i,0]
    for j in range(len(height)-2):
        plystrain_prin[i,2*j+1]=estrain_prin[i,0]+height[j]*kstrain_prin[i,0]
for j in range:
        plystress_prin[:,j]=np.dot(Qbar,plystrain_prin[:,j])
print("\n Principal Strain for each ply k: \n",plystrain_prin,"\n")
print("\n Principal Stress for each ply k: \n",plystress_prin,"\n")

#Sanity check to ensure array dimensions are correct
print ("plystrain_prin shape",plystrain_prin.shape)
print ("height shape",height.shape)
print("estrain_prin shape",estrain_prin.shape)
print("kstrain_prin shape",kstrain_prin.shape)

#Calculate primary strains and stresses in each ply k
plystrain_prim=np.zeros(shape=(3,len(height)))
plystress_prim=np.zeros(shape=(3,len(height)))

#for j in range(len(height)):
    #plystrain_prim[:,j]=transform_stress(plystrain_prin,)

#plot        
for i in range(3):
    plt.plot(plystrain_prin[i,:5],height)
    plt.gca().invert_yaxis()
    plt.xlabel("Laminate Global Strains x10^-2")
    plt.ylabel("Height Above and Below Midplane (mm)")
    plt.grid(axis="both")
    plt.title("Strain Through Laminate Thickness ")
    
print ("forces \n",forces,"\n moments \n",moments,"\n strain \n",midstrain)
